*pdf-preview.txt*           For NVIM v0.8.0          Last change: 2025 June 06

==============================================================================
Table of Contents                              *pdf-preview-table-of-contents*

1. Features                                             |pdf-preview-features|
2. Requirements                                     |pdf-preview-requirements|
3. Installation                                     |pdf-preview-installation|
4. Usage                                                   |pdf-preview-usage|
5. Configuration                                   |pdf-preview-configuration|
6. Workflow Tips                                   |pdf-preview-workflow-tips|
  - LaTeX                                    |pdf-preview-workflow-tips-latex|
  - Remote                                  |pdf-preview-workflow-tips-remote|
7. Contributing                                     |pdf-preview-contributing|
**LivePDF preview for Neovim using browser-sync.**

Easily preview PDF documents in your browser, with automatic reloading on file
changes. This plugin is ideal for a minimalistic LaTeX writing workflow, even
remotely over SSH.


==============================================================================
1. Features                                             *pdf-preview-features*

- **Auto-reloading**Refreshes the browser when your PDF file changes.
- **Remote-friendly**Works over SSH with port forwarding.
- **LSP-aware**Automatically detects project root from your LSP client.
- **Transparent**Install `browser-sync` automatically.
- **Minimal config**Simple `setup()` with sensible defaults.


==============================================================================
2. Requirements                                     *pdf-preview-requirements*

- **Node.js** (for `npm` and `npx`)


==============================================================================
3. Installation                                     *pdf-preview-installation*

Using lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    { 
        "franco-ruggeri/pdf-preview.nvim", 
        opts = {
            -- Override defaults here
        }
        config = function(_, opts)
            require("pdf-preview").setup()
    
            -- Add your keymaps here
        end
    }
<


==============================================================================
4. Usage                                                   *pdf-preview-usage*

Thefollowing user commands are created:

- `:PdfPreviewStart`Start the live preview server.
- `:PdfPreviewStop`Stop the preview server.

After using `:PdfPreviewStart`, open the printed URL (e.g.,
<http://localhost:5000>) in your browser.


==============================================================================
5. Configuration                                   *pdf-preview-configuration*

The default configuration is as follows:

>lua
    {
        -- PDF filepath relative to the project root directory
        pdf_filepath = "main.pdf",
        -- Port where the browser-sync server listen on. 
        -- If already in use, the port will be incremented until an available port 
        -- is found.
        port = 5000,
        -- Debounce delay for refresh events in milliseconds
        reload_debouce = 500,
    }
<


==============================================================================
6. Workflow Tips                                   *pdf-preview-workflow-tips*


LATEX                                        *pdf-preview-workflow-tips-latex*

This plugin works nicely with LaTeX. Just compile the LaTeX project into a PDF
document.

For instance, you can:

- Install the `texlab` LSP server using `mason.nvim`
    <https://github.com/mason-org/mason.nvim>.
- Configure `texlab` to compile on save.
    >lua
        vim.lsp.config("texlab", {
          settings = {
              texlab = {
                  build = {
                      onSave = true,
                  },
              },
          },
        })
    <

The `texlab` LSP server will take care of compiling on save, and `pdf-preview`
will watch for changes in the output PDF document.


REMOTE                                      *pdf-preview-workflow-tips-remote*

You can use SSH port forwarding to view the PDF remotely:

>bash
    ssh -L 5000:localhost:5000 user@remote
<


==============================================================================
7. Contributing                                     *pdf-preview-contributing*

All contributions are welcome! Open an issue to discuss ideas and open a pull
request once agreed.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
