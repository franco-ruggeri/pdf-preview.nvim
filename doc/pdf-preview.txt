*pdf-preview.txt*           For NVIM v0.8.0          Last change: 2025 July 07

==============================================================================
Table of Contents                              *pdf-preview-table-of-contents*

1. Overview                                             |pdf-preview-overview|
2. Features                                             |pdf-preview-features|
3. Requirements                                     |pdf-preview-requirements|
4. Installation                                     |pdf-preview-installation|
5. Usage                                                   |pdf-preview-usage|
6. Configuration                                   |pdf-preview-configuration|
7. Workflow Tips                                   |pdf-preview-workflow-tips|
  - LaTeX                                    |pdf-preview-workflow-tips-latex|
  - Remote server                    |pdf-preview-workflow-tips-remote-server|
  - Dev container                    |pdf-preview-workflow-tips-dev-container|
8. Contributing                                     |pdf-preview-contributing|
9. Links                                                   |pdf-preview-links|

==============================================================================
1. Overview                                             *pdf-preview-overview*

A Neovim plugin for easily previewing PDF documents in your browser, with
automatic reloading on file changes. This plugin is ideal for a minimalist
LaTeX editing workflow, even on a remote server or in a dev container.


==============================================================================
2. Features                                             *pdf-preview-features*

- Auto-reloading: Refreshes the browser when your PDF file changes.
- Remote-friendly: Works over SSH with port forwarding.
- Transparent: No side effects in your project.
- Minimal config: Simple `setup()` with sensible defaults.


==============================================================================
3. Requirements                                     *pdf-preview-requirements*

- Node.js (for `npm` and `npx`)


==============================================================================
4. Installation                                     *pdf-preview-installation*

Using lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    { 
        "franco-ruggeri/pdf-preview.nvim", 
        opts = {
            -- Override defaults here
        }
        config = function(_, opts)
            require("pdf-preview").setup(opts)
    
            -- Add your keymaps here
        end
    }
<


==============================================================================
5. Usage                                                   *pdf-preview-usage*

The following user commands are created:

- `:PdfPreviewStart` Start PDF preview.
- `:PdfPreviewStop` Stop PDF preview.
- `:PdfPreviewToggle` Toggle PDF preview.

After using `:PdfPreviewStart`, open the printed URL (e.g.,
<http://localhost:3000>) in your browser.


==============================================================================
6. Configuration                                   *pdf-preview-configuration*

The default configuration is as follows:

>lua
    {
        -- Port where the browser-sync server will try to listen on. 
        -- If nil, the default browser-sync behavior will be followed.
        port = nil,
        -- Debounce delay for refresh events in milliseconds
        reload_debouce = 500,
    }
<


==============================================================================
7. Workflow Tips                                   *pdf-preview-workflow-tips*


LATEX                                        *pdf-preview-workflow-tips-latex*

This plugin works nicely with LaTeX. Just compile the LaTeX project into a PDF
document.

For instance, you can:

- Install the `texlab` LSP server using `mason.nvim`.
- Configure `texlab` to compile on save.
    >lua
        vim.lsp.config("texlab", {
          settings = {
              texlab = {
                  build = {
                      onSave = true,
                  },
              },
          },
        })
    <

The `texlab` LSP server will take care of compiling on save, and `pdf-preview`
will watch for changes in the output PDF document.


REMOTE SERVER                        *pdf-preview-workflow-tips-remote-server*

You can use SSH port forwarding to view the PDF remotely:

>bash
    ssh -L <local-port>:localhost:<remote-port> <remote-user>@<remote-host>
<


DEV CONTAINER                        *pdf-preview-workflow-tips-dev-container*

You can use port forwarding by setting the `forwardPorts` property. See the
official documentation <https://containers.dev/implementors/json_reference/>.


==============================================================================
8. Contributing                                     *pdf-preview-contributing*

All contributions are welcome! Open an issue to discuss ideas and open a pull
request once agreed.

==============================================================================
9. Links                                                   *pdf-preview-links*

1. *demo*: https://github.com/user-attachments/assets/76bd5ff4-aade-4484-85fc-380f40c8cdf0

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
