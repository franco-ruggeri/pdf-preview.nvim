*pdf-preview.nvim.txt*        For NVIM v0.8.0        Last change: 2025 June 06

==============================================================================
Table of Contents                         *pdf-preview.nvim-table-of-contents*

1. pdf-preview.nvim 🧾🔍      |pdf-preview.nvim-pdf-preview.nvim-🧾🔍|
  - ✨ Features     |pdf-preview.nvim-pdf-preview.nvim-🧾🔍-✨-features|
  - ⚡ Requirements|pdf-preview.nvim-pdf-preview.nvim-🧾🔍-⚡-requirements|
  - 📦 Installation|pdf-preview.nvim-pdf-preview.nvim-🧾🔍-📦-installation|
  - Usage                   |pdf-preview.nvim-pdf-preview.nvim-🧾🔍-usage|
  - Configuration   |pdf-preview.nvim-pdf-preview.nvim-🧾🔍-configuration|
  - Workflow Tips   |pdf-preview.nvim-pdf-preview.nvim-🧾🔍-workflow-tips|
  - Contributing     |pdf-preview.nvim-pdf-preview.nvim-🧾🔍-contributing|

==============================================================================
1. pdf-preview.nvim 🧾🔍      *pdf-preview.nvim-pdf-preview.nvim-🧾🔍*

**Live PDF preview for Neovim using browser-sync.**

Easily preview LaTeX-compiled PDF documents in your browser, with automatic
reloading on file changes. Ideal for remote workflows, live editing, and fast
iteration.


✨ FEATURES         *pdf-preview.nvim-pdf-preview.nvim-🧾🔍-✨-features*

- 🔄 **Auto-reloading**: Refreshes the browser when your PDF file changes.
- 🔌 **Remote-friendly**: Works over SSH with port forwarding.
- 🧠 **LSP-aware**: Automatically detects project root from your LSP client.
- 🪞 **Transparent**: Install `browser-sync` automatically.
- ⚙️ **Minimal config**: Simple `setup()` with sensible defaults.


⚡ REQUIREMENTS *pdf-preview.nvim-pdf-preview.nvim-🧾🔍-⚡-requirements*

- **Node.js** (for `npm` and `npx`)


📦 INSTALLATION*pdf-preview.nvim-pdf-preview.nvim-🧾🔍-📦-installation*

Using lazy.nvim <https://github.com/folke/lazy.nvim>:

>lua
    { 
        "franco-ruggeri/pdf-preview.nvim", 
        opts = {
            -- Override defaults here
        }
        config = function(_, opts)
            require("pdf-preview").setup()
    
            -- Add your keymaps here
        end
    }
<


USAGE                       *pdf-preview.nvim-pdf-preview.nvim-🧾🔍-usage*

The following user commands are created:

- `:PdfPreviewStart`: Start the live preview server.
- `:PdfPreviewStop`: Stop the preview server.

After using `:PdfPreviewStart`, open the printed URL (e.g.,
<http://localhost:5000>) in your browser.


CONFIGURATION       *pdf-preview.nvim-pdf-preview.nvim-🧾🔍-configuration*

The default configuration is as follows:

>lua
    {
        -- PDF filepath relative to the project root directory
        pdf_filepath = "main.pdf",
        -- Port where the browser-sync server listen on. 
        -- If already in use, the port will be incremented until an available port 
        -- is found.
        port = 5000,
        -- Debounce delay for refresh events in milliseconds
        reload_debouce = 500,
    }
<


WORKFLOW TIPS       *pdf-preview.nvim-pdf-preview.nvim-🧾🔍-workflow-tips*


LATEX ~

This plugin works nicely with LaTeX. Just compile the LaTeX project into a PDF
document.

For instance, you can:

- Install the `texlab` LSP server using `mason.nvim`
    <https://github.com/mason-org/mason.nvim>.
- Configure `texlab` to compile on save.
    >lua
        vim.lsp.config("texlab", {
          settings = {
              texlab = {
                  build = {
                      onSave = true,
                  },
              },
          },
        })
    <

The `texlab` LSP server will take care of compiling on save, and `pdf-preview`
will watch for changes in the output PDF document.


REMOTE ~

You can use SSH port forwarding to view the PDF remotely:

>bash
    ssh -L 5000:localhost:5000 user@remote
<


CONTRIBUTING         *pdf-preview.nvim-pdf-preview.nvim-🧾🔍-contributing*

All contributions are welcome! Open an issue to discuss ideas and open a pull
request once agreed.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
